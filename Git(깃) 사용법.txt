[ GIT ] 
- 형상 관리 : 폴더 전체를 사진 찍듯이 기억하고 있는 개념


< 사용법 >

1. Git Bash 실행.

2. /c/myproject			|해당 폴더로 이동

3. git init			|로컬(지역) 저장소 생성 후 사용

----------------------------------------------------------------------
해당 폴더에 파일 하나를 생성, 깃이 추적하도록 추가

git status			|상태 확인 , 오류발생 (깃이 추적하지 않는 파일을 구분)

git add day01.txt		|day01.txt파일을 추가 >> 깃이 관리할 대상으로 인지

git status 			|상태를 확인 (오류 x)

git rm --cached day01.txt	|깃이 추적하는 파일을 해제

----------------------------------------------------------------------
유저 이름, 이메일등록
git config --global user.name "Lim"
git config --global user.email "Lim@gmail.com"

설정값들 확인
git config --list

----------------------------------------------------------------------
commit (커밋)
현재 기록에 대한 코맨트를 달 수 있는 페이지가 나옴(vim 동작)

입력모드 <-> 명령모드 <-> 실행모드
수정하기 위해선 입력모드로 전환  ( i, o, a )
입력이 끝나면 ( esc ) 눌러서 명령모드로 이동
실행모드로 넘어가서 나가기( :wq ) 또는 저장안하고 나가기 ( q! )




==========================================================================

[ Git 명령어 ]

Working -> Staging Area -> Commit


< Git 명령어 >
git init  				|지역(로컬)저장소 생성

git add .				|폴더에 생성된 전체 내용을 Staging Area(commit 대기 파일)에 올림
					|(조건에 맞는 모든 파일)	

git commit				|main에서 시작 지점을 생성 (기록 시작), 작업 내용을 지역 저장소에 저장.

git status				|현재 상태를 파악 (수정 시 수정된 사안에 대해 알고있음)
- git restore				|수정 전 상태로 돌릴 수 있음	>>  git restore day01.txt
- git add .				|수정 된 파일을 Commit
- git restore --staged day01.txt	|저장된 파일을 저장하기 전으로 되돌리는 기능

git commit				|변경 내용 또는 작업 내용을 지역 저장소에 저장. (에디터)
git commit -m "메시지"			|간단하게 메시지 작성 (길게 쓸때는 에디터 사용)

git log					|로컬 저장소의 상태에 대해 찍어놓은 정보를 볼 수 있음
git log --oneline 			|수정된 기록을 간단하게 한 줄로 확인
git log --oneline --graph --all		|브랜치 확인 가능


==========================================================================


[ 수정된 파일 내용 저장 ]

1. 파일을 등록하기 위해서
  git add . 	 ==>	 git commit 
(수정내용 저장) 		   (저장)

2. 위의 두 방법을 한 번에 수행
git commit -a 				|Staging Area에 올리는 작업 한번에 실행 (add + commit)
git commit -am "메시지"			|add 와 commit(메시지) 을 한번에 실행



[ 원하는 작업 시점 이동 ]

git log --oneline			|저장 기록을 간단하게 한 줄로 확인

git checkout (커밋해쉬) 			|원하는 저장 장소로 이동 (Head 가 해당 위치로 이동)

git checkout main			|마지막 작업시점인 메인으로 이동
git switch main				|최근 위치로 이동 (checkout == swith)
	


[ .gitignore (Vscode에서) ]
- 깃에서 추적하지 않고 무시하는 파일로 저장하고자 할 때

git status						|상태 확인

1) Vscode에서 새로운 파일 추가 ex) day01계획.txt		|깃에서 추적되고 있지 않음
2).gitignore 파일 생성
  .gitignore 파일 내용에 추가한 파일 작성 시		|깃에서 무시하는 파일로 저장된다.





[ 브랜치 (branch) ]

git branch				|현재 저장소에 저장되어 있는 목록이 나온다
					|(브랜치 목록 및 현재 브랜치의 위치를 확인)

git branch [생성할 브랜치 명]		|브랜치 생성 (main 에서 갈라져 나온 move)
git branch move			

git switch [이동할 브랜치 명]
git switch move				|생성된 브랜치인 move로 이동
git switch main				|메인 브랜치인 main로 이동

git branch -d move			|브랜치 삭제



[ branch 사용법 ]

1. 현재 시점에서 브랜치를 생성
git log --oneline			| 현재 저장된 작업 목록을 확인
git branch				|  현재 브랜치 목록 확인 (현재는 main)
git branch testfunc1			| 테스트 브랜치 생성 (두 개의 브랜치 main, testfunc1)

(testfunc1로 브랜치 이동)
git switch testfunc1			| 기본 main 에서 testfunc1로 브랜치 이동

해당 파일 수정 후 git status		| 수정된 파일 있는지 확인
git add .
git commit -am "test1"			| 수정파일 test1 저장

해당 파일 수정 후 git status		| 수정된 파일 있는지 확인
git add .
git commit -am "test2"			| 수정파일 test2 저장


1-1. testfunc1을 main과 병합(merge)
- merge 를 위해서는 합치고자 하는 곳에 가서 해야 된다. (main 이동 후 testfunc1을 merge)
 
git switch main 				| 합치고자 하는 주가 되는 브랜치로 이동(main으로 이동)

main 파일 수정				| main 파일 수정 
git add .
git commit -am "maintest3"		| 수정파일 test2 저장

git merge testfunc1			| testfunc1의 내용을 main으로 가져와서 병합(merge)
					| 같은 부분 수정 있으면 충돌, 없으면 충돌 안일어남

merge 간 충돌 발생 시 직접 vscode에서 코드 수정. 
(HEAD 위치 : main브랜치  /  testfunc1 위치 : testfunc1 브랜치)
=> 코드 수정 후
=> git status
=> git add .
=> git commit -m "merge1"

git log --oneline --graph --all		| main 브랜치와 testfunc1 브랜치의 브랜치 두 갈래 확인


병합 후 브랜치 삭제
git branch -d testfunc1

브랜치 삭제는 다른 브랜치로 이동해서 브랜치를 삭제 (B 브랜치 삭제 시 A 브랜치로 이동해서 B 브랜치 삭제)





2. 수정하고자 할 위치로 돌아가 브랜치를 생성

git branch testfunc2 (커밋해쉬)		| 되돌아갈 이전 작업으로(커밋해쉬) 이동하여 브랜치 생성

git switch testfunc2			| 생성한 testfunc2 브랜치로 이동

git log --oneline			| 현재 작업목록 확인

기능 추가 (내용 수정)			| 파일 수정
git add .
git status
git commit -m "test3"

기능 추가 (내용 수정)
git add .
git status
git commit -m "test4"

git log --oneline --graph --all		| 전체 graph 확인


2-1. main과 testfunc2 를 병합(merge)
git switch main				| main 브랜치로 이동
git merge testfunc2			| main 에 testfunc2를 병합

충돌발생					| 겹치는 부분 있을 시 충돌발생
충돌 코드는 직접 수정
git add .
git status	
git commit -m "testfunc2 main merge"	| 코드 수정 후 저장 및 commit





git checkout (커밋해쉬) 
git branch move
git status
git add .
git commit -m "택시탔으면"

git add .
git commit -m "8시59분 도착"

git log --oneline 		| 브랜치 move는 7번째를 가르킴.

git switch main			| main 으로 이동 (수정된 내용은 반영되지 않음)
git switch move			| move시점으로 이동 (수정된 내용 반영)




< 브랜치 내에서 HEAD 이동 >
git checkout HEAD~2		|그 갯수 만큼 HEAD가 이동
git checkout main		|다시 main 으로 이동



==========================================================================

※ 굳이 추천하진 않는 방법 (reset, revert)


< reset >
- 이 전의 시점으로 돌아가고 그 이후의 내용을 모두 삭제 (전의 기록은 모두 삭제)

git reset (해당 시점, 커밋해쉬) 	|원하는 시점으로 이동
git status
git log --oneline --all		| 해당시점까지 나오고 그 이후의 내용은 모두 없어짐


git reset (커밋해쉬)		| Working 시점으로 이동
git reset --soft (커밋해쉬)	| 가고자 하는 다음 시점의 Staging Area 시점으로 이동 
git reset --hard (커밋해쉬)	|★ 가고자하는 시점의 마지막 시점으로 이동, 그 이후는 모두 삭제!!
git reset --mixed (커밋해쉬)	|★ 가고자 하는 다음 시점의 Working 시점으로 이동 (기본값)
				|   작업 내용은 삭제되지 않고 기억됨


< revert > 
- 새로운 커밋 지점을 생성할 때, 원하는 시점(이 전)의 작업 내용을 가지고 와서 그 내용을 커밋.
그 지점부터 이어서 작업할 수 있다. (전의 기록은 모두 남아있음)

git revert (커밋해쉬)		



==========================================================================

q 나가기